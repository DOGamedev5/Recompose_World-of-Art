[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://worlds/shaders/0069.png" type="Texture" id=1]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

const float TAU = 3.14159265359 * 2.0f;

uniform vec2 resolution = vec2(600.0, 400.0);
uniform vec3 spiral_color = vec3(0.3, 0.15, 0.6);
uniform float frequency: hint_range(1.0, 10.0, 0.1) = 8.0;
uniform float speed: hint_range(1.0, 20.0, 0.1) = 8.0;
uniform float brightness: hint_range(1.0, 10.0, 0.1) = 5.0;
uniform float balance: hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float octaves: hint_range(1.0, 10.0, 1.0) = 4.0;
uniform sampler2D NORMAL_MAP;
uniform float refractionPower = 0.5;
uniform float normalSize = 0.2;

float draw_spiral(vec2 uv, float rotation) {
	float uv_radius = length(uv);
	float uv_phi = atan(uv.y, uv.x) + rotation;
	float spiral_phi = (log(uv_radius) * frequency - uv_phi) / TAU;
	float spiral_ceil_radius = exp((TAU * ceil(spiral_phi) + uv_phi) / frequency);
	float spiral_floor_radius = exp((TAU * floor(spiral_phi) + uv_phi) / frequency);
	return mix(mix(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius), balance), max(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius)), balance);
}

vec2 effect(vec2 uv){
	vec3 normalMap = normalize((texture(NORMAL_MAP, uv*vec2(normalSize)).rgb * 2.0) - 1.0);
	vec3 tangentViewDirection = vec3(0.0, 0.0, -1.0);
	vec3 refractedDirection = refract(tangentViewDirection, normalMap, 0.75);
	vec3 resultDirection = normalize(mix(tangentViewDirection, refractedDirection, refractionPower));
	
	return resultDirection.xy;
}

void fragment() {
	vec2 uv = UV - 0.5;
	uv.x *= resolution.x / resolution.y;
	uv.x += 0.075 * sin(TIME/1.5);
	uv.y += 0.075 * cos(TIME/1.8);
	
	uv += effect(UV);
	
	
	vec3 overColorX = vec3(0.3, 0.2, 0.9) * (sin(TIME*0.5)+1.0) * 0.5; 
	vec3 overColorY = vec3(0.6, 0.2, 0.8) * (cos(TIME*0.5)+1.0) * 0.5;
	vec4 overColor = vec4(mix(overColorX, overColorY, 1), 0.2);
	
//	uv *= vec2(0.5);
	float spiral = 0.0;



	for (float i = 0.0; i < octaves; i += 1.0) {
//		spiral += draw_spiral(uv, 0);
		spiral += draw_spiral(uv, TIME * speed * (0.5 + sin(i)));
	}
	spiral /= octaves;

//	vec3 color = spiral * vec3(0.1f*(0.5f - distance(UV, vec2(0.5))) + 0.2f, 0.01, 0.6*distance(UV, vec2(0.5)) - 0.05f);// * spiral_color;
	vec3 colorMask = spiral * vec3(
		2.5*(0.5 - distance(UV, vec2(0.5))),
		1.0*distance(UV, vec2(0.5)),// * spiral_color;
		0.0);

	vec3 color = mix(vec3(0.4, 0.1, 0.7) * colorMask.g, vec3(0.6, 0.4, 0.2) * colorMask.r, 0.1);

//	COLOR = overColor;
	COLOR.rgb = mix(color * brightness, overColor.rgb, 0.2);
//	COLOR = vec4(color * brightness, 1);
}
"

[resource]
render_priority = 1
shader = SubResource( 3 )
shader_param/resolution = Vector2( 600, 400 )
shader_param/spiral_color = Vector3( 0.3, 0.15, 0.6 )
shader_param/frequency = 7.6
shader_param/speed = 2.0
shader_param/brightness = 6.1
shader_param/balance = 1.0
shader_param/octaves = 3.0
shader_param/refractionPower = 1.0
shader_param/normalSize = 0.1
shader_param/NORMAL_MAP = ExtResource( 1 )
